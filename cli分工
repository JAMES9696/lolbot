CLI 编号	角色 (Role)	主要目的 (Purpose)	运行工具/命令 (Tools)	关注点 (Focus)
CLI 1	前端 (The Frontend)	Discord 交互、指令触发、热重载开发。	discord.py Bot 主进程 (启用热重载，如 watchdog)	实时响应速度、Discord API 错误、用户体验调试、核心业务逻辑流转。
CLI 2	后端 (The Backend)	处理耗时的异步任务、数据分析、AI 推理。	Celery 或 RQ Worker 进程 (celery -A tasks worker)	任务成功/失败状态、Worker 性能瓶颈、外部 API 调用日志 (Riot, Gemini, TTS)。
CLI 3	观察者 (The Observer)	监控系统状态、数据库变化、缓存与队列健康。	psql (PostgreSQL Shell), redis-cli monitor, docker stats	数据一致性验证、缓存命中率、API 速率限制状态、llm_debug_wrapper 输出的性能指标。
CLI 4	实验室 (The Lab)	数据探索、API 测试、算法原型设计、Prompt 迭代。	IPython, Jupyter Notebook, 连接到 NotebookLM 环境	Riot API 响应结构分析 (Timeline 数据)、评分算法调试、LLM 输出质量验证。

您提供的四核 CLI 并行开发模型（Vibe Coding）与项目的六边形架构完美契合，最大程度地实现了职责分离和并行工程。

以下针对您提出的四个 CLI 角色，结合项目约束和现有资料，为您详细列出开发前必须完成的准备工作和关注细节：

---

## Project Chimera：多 CLI 并行开发准备清单

### 一、 CLI 1：前端 (The Frontend) — 交互与热重载

前端 CLI 负责直接处理用户交互和保证实时响应速度，必须严格遵守 Discord API 的时效性要求。

| 准备项 | 细节和依据 | 关注的约束/风险 |
| :--- | :--- | :--- |
| **Discord API 认证与配置** | 准备 Discord Bot Token，并确保通过 **Pydantic Settings 从环境变量加载**，**禁止硬编码**。| **配置管理**。|
| **Discord.py 异步核心** | 确认使用 `discord.py` 库，它是一个支持 `async`/`await` 语法的现代异步 API 封装，有助于处理高并发请求。| **异步编程**。|
| **延迟回复机制** | 针对耗时的 `/讲道理` 指令，必须在接收到交互事件的 **3 秒内** 发送 **延迟回复** (`DEFERRED_CHANNEL_MESSAGE_WITH_SOURCE`，值 5)，以避免交互令牌失效。| **实时响应速度 / UX**。|
| **Slash Command 集成** | 采用 Discord 的 **斜杠命令（Slash Commands）** 体系，以提供自动建议菜单和更好的用户体验（UX）。| **用户体验调试**。|
| **热重载机制 (Watchdog)** | 实现或配置 `watchdog` 等工具来监控代码更改，并自动重启 `discord.py` 主进程，以支持**热重载开发**（Vibe Coding）。| **开发效率 / Vibe Coding**。|
| **Discord 速率限制处理** | 必须实现对 Discord API **429 错误** 的处理，即**遵守响应头中的 `Retry-After` 值**。同时，确保避免产生过多的无效请求（401, 403, 429），以防止触发 **Cloudflare Ban**（每 10 分钟 10,000 次无效请求的硬限制）。| **Discord API 错误 / 速率限制**。|
| **任务流转逻辑** | 明确定义 Frontend (CLI 1) 如何通过 **Redis** 将 `/讲道理` 等耗时指令的 **交互令牌** 和必要参数安全地传递给 Backend (CLI 2) 的任务队列。| **核心业务逻辑流转**。|

### 二、 CLI 2：后端 (The Backend) — 任务处理与外部集成

后端 CLI 承担了所有耗时、高 I/O 阻塞的操作（API 调用、LLM 推理、数据分析），是项目性能的核心瓶颈点。

| 准备项 | 细节和依据 | 关注的约束/风险 |
| :--- | :--- | :--- |
| **异步任务队列 (Celery/RQ)** | 部署并配置 Celery/RQ Worker 进程，使用 **Redis 作为消息代理**（Broker）。用于异步执行 Match-V5 Timeline 数据获取和 LLM 推理等任务。| **任务成功/失败状态**。|
| **Riot API 客户端选型** | **强烈推荐使用 Cassiopeia**，因为它是一个**“全包容”的 Python 框架**，专注于可用性，提供**“完美”的速率限制处理**和**内置缓存功能**，这对于应对高配额的**生产 API 密钥**至关重要。| **Riot API 调用日志 / Worker 性能**。|
| **Riot API 密钥与配额** | 确认已申请并获得 Riot Games 的 **生产 API 密钥 (Production Key)**，因为开发密钥的速率限制（每 10 秒 10 次）不足以支持公共机器人。密钥**必须从环境变量加载**。| **外部 API 调用日志 (Riot)**。|
| **异步库准备** | 准备使用 `aiohttp` 进行通用网络请求，并为 PostgreSQL 连接准备异步库，例如 **`asyncpg`**。| **异步编程**。|
| **LLM/TTS 集成** | 确保 LLM (Gemini) 和 TTS (豆包) 的 Adapter (`src/adapters/`) 能够接收和发送结构化数据。特别是 LLM 的输出应包含**情绪标签**，以供 TTS 引擎进行情感化交互。| **外部 API 调用日志 (Gemini, TTS)**。|
| **可观测性集成** | 在所有 Adapter 调用和核心逻辑中应用 `llm_debug_wrapper` 装饰器，确保生成结构化日志，并追踪 Riot API、Gemini 和 TTS 的**调用延迟**和**错误情况**。| **llm_debug_wrapper 输出**。|

### 三、 CLI 3：观察者 (The Observer) — 监控与健康

观察者 CLI 的主要任务是提供系统健康和性能的即时反馈，尤其关注异步环境中的并发和速率限制状态。

| 准备项 | 细节和依据 | 关注的约束/风险 |
| :--- | :--- | :--- |
| **数据库监控** | 设置 `psql` 命令行工具，用于检查 PostgreSQL 数据库中用户绑定信息（Discord ID/PUUID）和比赛数据（JSONB）的**数据一致性**。| **数据一致性验证**。|
| **Redis 缓存与队列监控** | 使用 `redis-cli monitor` 或相关工具，监控 Redis 实例的**缓存命中率**和**队列长度**（Celery/RQ 任务队列的积压情况）。高命中率是减少 Riot API 压力的关键指标。| **缓存命中率 / 队列健康**。|
| **API 速率限制状态** | 部署工具或利用 `llm_debug_wrapper` 收集的指标，实时监控 Riot API 的**应用速率限制**（每 10 秒 500 次）和 Discord API 的**全局速率限制**（每秒 50 次请求）的剩余配额和重置时间。| **API 速率限制状态**。|
| **性能指标追踪** | 持续聚合 `llm_debug_wrapper` 输出的性能数据（例如，Match-V5 Timeline 获取耗时、LLM 推理时间），用于识别和优化 **Worker 性能瓶颈**。| **llm_debug_wrapper 输出的性能指标**。|

### 四、 CLI 4：实验室 (The Lab) — 原型与数据探索

实验室 CLI 是用于支持核心领域逻辑（评分算法）和 AI 逻辑（Prompt/TTS）迭代的敏捷环境。

| 准备项 | 细节和依据 | 关注的约束/风险 |
| :--- | :--- | :--- |
| **API 响应结构分析** | 使用 IPython/Jupyter 深入探索 Riot Games **Match-V5 Timeline** API 返回的原始 JSON 结构。这是构建 **Pydantic 模型 (`MatchTimeline`)** 和评分算法的数据基础。| **Riot API 响应结构分析**。|
| **算法原型设计与测试** | 搭建支持 **TDD** 的环境，使用 `pytest-asyncio` 进行异步测试。重点是设计和调试位于 `src/core/` 的**赛后评分算法**，确保其独立于外部 API。| **评分算法调试**。|
| **LLM Prompt 迭代** | 使用 Jupyter/NotebookLM 环境来测试 LLM（Gemini）的 **系统提示**，不断迭代，确保 `/讲道理` 分析结果的**洞察力**和`/垃圾话模式` 的**情感化和个性化**输出质量。| **LLM 输出质量验证**。|
| **静态/辅助数据集成** | 准备数据加载脚本，获取 **Data Dragon** 的最新英雄、物品、符文等静态数据。可探索使用 **opgg.py** 等非官方 Python 库，用于获取社群元数据（需注意爬虫风险）。| **数据探索**。|

### 总结：关键项目合规与架构准备

为了确保这四个 CLI 能够顺利启动并长期运行，您必须在开发前落实以下非功能性准备：

1.  **Riot 合规性确认**：必须阅读并遵守 Riot API 条款，特别是**不得提供游戏中未显示的信息以获得竞争优势**的限制。如果涉及 VIP 内容收费，必须事先获得 Riot 书面批准，并确保内容具有**变革性**且提供**免费访问层级**。
2.  **RSO/用户绑定流程**：确认需要 **生产 API 密钥** 才能实施 Riot Sign On (RSO)/OAuth 流程，这是将 Discord 用户 ID 绑定到 Riot PUUID 的标准方法。
3.  **类型安全保障**：所有数据模型（包括 Riot API 响应）必须使用 **Pydantic V2** 在 `src/contracts/` 中定义，并强制执行严格的 **MyPy 类型检查**。同时，使用 `Type | None` 语法。
4.  **配置环境**：确保所有敏感配置（API 密钥、数据库凭证）都通过 **Pydantic Settings** 从环境变量中安全加载，以遵守**禁止硬编码**的约束。