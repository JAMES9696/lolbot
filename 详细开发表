4. 详细开发计划表
起始日期: 2025年10月6日

阶段	时间 (Week)	核心目标	INFRA & 架构任务 (并行)	数据与功能任务 (并行)	质量与测试任务 (持续)
P1: 启动与连接	W1-2	建立工程基础，连接核心 API，实现基础数据流。	1. 初始化 Poetry，配置 CI/CD (Ruff, MyPy, Pre-commit)。 2. 搭建六边形架构骨架。 3. 配置 Pydantic Settings 和 Docker Compose (PostgreSQL, Redis)。 4. 实现 llm_debug_wrapper。	1. 定义核心 Pydantic 契约 (Contracts)。 2. 实现 Riot API 和 Discord 适配器 (Adapters)。 3. 实现数据库适配器和 Schema（含时区时间戳）。 4. 实现 /bind 核心逻辑 (Core)，连接用户与 PUUID。	1. 为所有适配器编写单元测试。 2. 配置 pytest-asyncio。 3. 验证 MyPy 类型覆盖率。
P2: 数据处理与实时性	W3-4	实现复杂数据获取、异步处理和初步的用户交互。	1. 搭建异步任务队列 (Celery/RQ)。 2. 优化数据库 JSONB 存储结构。 3. 实现权限系统 (RBAC) 基础框架。	1. 实现 Match-V5 History 和 Timeline 数据抓取（移交异步 Worker）。 2. 开发实时比赛监控轮询逻辑。 3. 实现 /个人中心 和基础赛后数据卡片。	1. 编写异步任务集成测试。 2. Mock Riot API 响应进行测试。 3. 测试数据持久化逻辑（幂等性）。
P3: 评分算法与社区核心	W5-6	开发核心业务逻辑（评分），建立社区互动功能。	1. 完善 RBAC，实现管理员/赞助商权限检查 (PermissionChecker)。 2. 优化 Redis 缓存策略，实现分布式 API 速率限制。	1. (CLI4/Lab) 设计并实现 V1 版评分算法。 2. 将评分算法部署到异步 Worker。 3. 实现 /排行榜 和 /通缉榜 核心逻辑。	1. (TDD) 针对评分算法进行大量边界条件测试。 2. 测试权限系统安全性。
P4: AI 赋能	W7-8	集成 LLM 和 TTS，实现智能化分析和语音交互。	1. 实现 AI/LLM 适配器 (Gemini)。 2. 实现 TTS 适配器 (豆包) 和 Discord Voice API 连接。	1. (CLI4/Lab) Prompt Engineering：将结构化数据转化为叙事文本。 2. [核心] 实现 /讲道理 指令逻辑（使用 Discord Defer Reply）。 3. 实现情感化语音播报和赞助用户自定义音频功能。	1. 测试 LLM 输出的稳定性和安全性。 2. 测试语音频道的连接和音频播放质量。
P5: 优化与探索	W9-10	性能调优、国际化支持和探索性功能研发。	1. 实现国际化 (i18n) 框架。 2. Docker 化应用，准备生产部署。 3. 数据库性能索引优化与迁移工具（如 Alembic）集成。	1. 实现多区域 API 路由 (NA1, EUW)。 2. (R&D/Windows) 探索 Replay API 伴侣应用的可行性。 3. 全面错误处理和系统容错机制（如断路器模式）。	1. 端到端 (E2E) 测试。 2. 压力测试与性能分析。


这是一个雄心勃勃且结构严谨的开发计划。鉴于项目对合规性、高并发、深度异步处理和严格的架构约束（六边形架构、Pydantic V2）的重视，开发前期的准备工作（尤其是在 P1 阶段开始之前或并行）至关重要。

以下是针对您详细开发计划表（2025 年 10 月 6 日启动）中各阶段，特别是 P1 阶段核心目标的**开发前准备细节清单**：

---

## Project Chimera 详细开发前准备清单

### I. 合规性与认证（P1：启动与连接的首要前提）

由于项目面向公共并计划进行商业化（赞助用户），Riot Games 的合规性是项目启动的最高优先级。

1.  **Riot 政策审查**
    *   **强制阅读** 必须仔细阅读并理解 Riot Games 的 **API 条款**（API Terms）和**主要使用条款**（Master TOU）。
    *   **持续监控** 需设置机制监控 Riot Developer Site，确保始终使用最新的稳定版 API，并了解条款的任何变更。

2.  **API 密钥与配额**
    *   **密钥申请** 必须立即注册产品提案并申请 **生产 API 密钥 (Production Key)**。开发密钥（每 10 秒 10 次请求）的速率限制极低，不足以支持公共机器人和 Match-V5 Timeline 的高并发调用。
    *   **配额目标** 生产密钥的起始速率限制远高于开发密钥（例如，**每 10 秒 500 次请求，每 10 分钟 30,000 次请求**，按区域执行）。
    *   **密钥安全** 密钥**必须通过 Pydantic Settings 从环境变量加载**，**禁止硬编码**在代码中或分发给任何第三方。

3.  **商业化合规（P4/P5 风险预警）**
    *   **事先批准** 如果计划通过 VIP 内容（例如赞助用户自定义音频）**收费**，必须**事先通知 Riot 并获得书面批准**。
    *   **变革性要求** 任何收费内容必须是**变革性的**（Transformative），且**必须提供免费的访问层级**。
    *   **游戏诚信** 必须确保产品**不提供游戏中未显示的、会给玩家带来竞争优势的信息**（例如，自动追踪敌方终极技能冷却时间）。

4.  **用户绑定准备（P1：/bind 核心逻辑）**
    *   **RSO 流程** `/bind` 核心逻辑需要实现 Riot 的 **Riot Sign On (RSO)/OAuth 流程**，这是将 Discord ID 绑定到 Riot **PUUID** 的官方安全方法。
    *   **生产密钥依赖** RSO 集成**仅对拥有生产级 API 密钥的开发者开放**。

---

### II. 架构与 INFRA 初始化（P1：W1-2 基础设施）

P1 专注于构建六边形架构的基础设施，确保严格遵守项目的技术约束。

1.  **环境与类型安全**
    *   **Python/Pydantic V2** 确保开发环境使用支持 Pydantic V2 和 Python `asyncio` 的版本，并使用 `Type | None` 语法进行类型标注。
    *   **CI/CD 配置** 初始化 **Poetry**，并配置 **Ruff**（用于 Linting/Formatting）和 **MyPy**（用于严格类型检查），集成到 **pre-commit hooks** 中，以强制执行代码质量标准。
    *   **数据契约 (Contracts)** 在 `src/contracts/` 中定义所有核心数据模型，特别是 Riot API 响应（如 `MatchTimeline`）对应的 **Pydantic V2 模型**。

2.  **异步核心与数据库**
    *   **异步库** 准备使用 `discord.py` 和 **`aiohttp`** 进行异步网络请求，并配置用于 **PostgreSQL** 的异步库，例如 **`asyncpg`**，以避免阻塞。
    *   **Docker Compose** 准备 Docker Compose 文件，初始化 **PostgreSQL** 实例（用于持久化数据，包括 JSONB 存储 P2 优化）和 **Redis** 实例（用于缓存和任务队列 Broker）。

3.  **可观测性实现**
    *   **`llm_debug_wrapper`** 在 P1 阶段必须实现并应用 **`llm_debug_wrapper` 装饰器**。该装饰器必须应用于所有核心函数和 Adapter 调用，以确保结构化日志输出，用于追踪性能和错误，为 CLI 3（观察者）提供数据源。

---

### III. 关键 Adapter 选型与延迟应对 (P1/P2)

Adapter 的设计直接影响机器人的稳定性和响应性。

1.  **Riot API 客户端选择 (Adapter)**
    *   **推荐 Cassiopeia** 优先使用 **Cassiopeia**，因为它是一个**“全包容”的 Python 框架**，提供**“完美”的速率限制处理**和**内置缓存功能**，这对处理生产密钥的高并发配额至关重要。
    *   **限速应对** Adapter 层的代码必须能够捕获 **429 (Rate Limit Exceeded)** 错误，并严格**遵守响应头中的 `Retry-After` 值**进行退避和重试。

2.  **Discord 延迟机制**
    *   **3 秒时限** 针对 P4 的核心指令 `/讲道理`，必须实现 Discord 的 **延迟回复 (Defer Reply)** 机制，使用 **`DEFERRED_CHANNEL_MESSAGE_WITH_SOURCE` (值 5)** 作为初始响应，以满足**接收到交互事件后 3 秒内**必须响应的要求，否则交互令牌将失效。
    *   **任务流转** 确保 CLI 1 (Frontend) 能够通过 **Redis** 将**交互令牌**和必要的用户/比赛参数安全地传递给 CLI 2 (Backend Worker) 的任务队列。

3.  **数据辅助工具准备**
    *   **静态数据** 准备集成 **Data Dragon** API，用于获取英雄、物品、符文的**静态数据和图片资源**，为 P3 评分展示和 P5 国际化（支持多语言，如 `zh_CN`）做准备。
    *   **非官方数据** 可探索集成 **`opgg.py`** 等非官方 Python 库，用于获取 OPGG 上的英雄出装、符文和排名等补充信息，以增强 `/讲道理` 的分析维度，但需注意潜在的爬虫风险。

---

### IV. 质量控制与 CLI 并行准备（贯穿始终）

确保开发流程和环境支持 **TDD** 和 **Vibe Coding** 的并行工作流。

1.  **测试环境准备**
    *   **异步测试框架** 配置 **`pytest-asyncio`**，用于对异步代码和 Adapter 进行单元测试。
    *   **Mocking** 规划在 P2 阶段开始之前，准备好 Riot API 的 Mock 响应数据，以便在不消耗真实 API 配额的情况下，测试 Match-V5 Timeline 的数据处理逻辑。

2.  **CLI 3 (观察者) 工具链**
    *   **监控工具** 准备 `psql` 命令行工具、`redis-cli monitor`，用于实时检查数据库状态、缓存命中率以及任务队列的积压情况。

3.  **CLI 4 (实验室) 环境**
    *   **原型环境** 搭建 **IPython/Jupyter Notebook** 环境，用于数据探索、Riot API 响应结构分析和 P3 评分算法的原型设计。
    *   **AI 迭代环境** 确保 Jupyter/NotebookLM 环境能够连接 LLM (Gemini)，用于 P4 的 **Prompt Engineering** 迭代和 **系统提示** 的质量验证。