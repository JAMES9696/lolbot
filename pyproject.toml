[tool.poetry]
name = "project-chimera"
version = "0.1.0"
description = "AI-powered League of Legends Discord Bot with deep match analysis"
authors = ["蔚-上城人 Team"]
readme = "README.md"
packages = [{include = "src"}]

[tool.poetry.dependencies]
python = ">=3.11,<3.13"
# Core Dependencies
pydantic = "^2.5.0"
pydantic-settings = "^2.1.0"
python-dotenv = "^1.0.0"
structlog = "^25.4.0"

# Discord Integration
"discord.py" = "^2.3.2"

# Riot API
cassiopeia = "^5.1.0"  # Comprehensive Riot API client with rate limiting
aiohttp = "^3.9.0"

# Database & Cache
asyncpg = "^0.29.0"
redis = "^5.0.0"
sqlalchemy = {extras = ["asyncio"], version = "^2.0.25"}
alembic = "^1.13.0"

# Task Queue
celery = {extras = ["redis"], version = "^5.3.0"}

# AI & LLM
google-generativeai = "^0.3.0"  # Google Gemini

# TTS & CDN
aioboto3 = "^13.0.0"  # Async AWS SDK for S3 uploads

# Development & Data Exploration
jupyter = "^1.0.0"
ipykernel = "^6.27.0"
pandas = "^2.1.0"
matplotlib = "^3.8.0"
seaborn = "^0.13.0"
plotly = "^5.18.0"
httpx = "^0.26.0"  # For API testing
Pillow = "^10.4.0"

# Async Support
asyncio = "^3.4.3"
nest-asyncio = "^1.5.8"  # For Jupyter async support
pynacl = "^1.6.0"

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^7.4.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"

# Code Quality
ruff = "^0.1.0"
mypy = "^1.7.0"
black = "^23.12.0"
isort = "^5.13.0"
pre-commit = "^3.6.0"

# Type Stubs
types-redis = "^4.6.0"
types-aiofiles = "^23.2.0"

# Development Tools
watchdog = "^3.0.0"  # For hot reloading
python-json-logger = "^2.0.7"  # Structured logging
rich = "^13.7.0"  # Beautiful terminal output
prometheus-client = "^0.20.0"
types-aioboto3 = "^15.2.0"
numpy = "^2.3.3"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 100
target-version = "py311"
extend-exclude = [
    "notebooks/v2.1_prescriptive_analysis.ipynb",  # Corrupted JSON
    "notebooks/v2_ab_test_analysis.ipynb",  # Python 3.12 f-string syntax
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "UP", # pyupgrade
    "B",  # flake8-bugbear
    "SIM", # flake8-simplify
]

ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "E402", "SIM117"]  # allow assert, late imports, and nested with in tests
"scripts/*" = ["E402", "E722", "SIM117"]  # allow late imports, bare except, and nested with in scripts
"notebooks/*" = ["E402", "B007"]  # allow late imports and unused loop variables in notebooks
# E402: Module imports not at top - intentional to avoid circular imports
"src/contracts/v23_multi_mode_analysis.py" = ["E402"]
"src/core/views/ascii_card.py" = ["E402"]
"src/tasks/team_tasks.py" = ["E402", "SIM117"]
# SIM117: Nested with statements - intentional for resource management (connection pools, transactions, HTTP sessions)
"src/adapters/database.py" = ["SIM117"]
"src/adapters/gemini_adapter.py" = ["E402"]
"src/adapters/discord_adapter.py" = ["SIM117"]
"src/api/rso_callback.py" = ["SIM117"]

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = true
no_implicit_optional = true
check_untyped_defs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
mypy_path = "src"
# Avoid duplicate module collision between package `src/config/` and legacy module `src/config.py`
# Exclude P2 prototype adapters from strict type checking (will be refactored in P3)
exclude = '^src/config(\.py|/__init__\.py)$|^src/adapters/ddragon_adapter\.py$'

namespace_packages = false

# Third-party library imports - P4 MyPy cleanup (CLI 3 task)
# These libraries lack type stubs or have incomplete typing
[[tool.mypy.overrides]]
module = [
    "discord.*",        # discord.py - missing type stubs
    "celery.*",         # Celery - partial typing
    "aiohttp.*",        # aiohttp - has inline types but some gaps
    "asyncpg.*",        # asyncpg - partial typing
    "cassiopeia.*",     # Riot API client - no type stubs
    "google.generativeai.*",  # Gemini SDK - partial typing
]
ignore_missing_imports = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "-v --tb=short --cov=src --cov-report=term-missing"

[tool.black]
line-length = 100
target-version = ['py312']
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
