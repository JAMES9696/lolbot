[tool.poetry]
name = "lolbot"
version = "0.1.0"
description = "AI-powered LoL Discord Bot with deep match analysis"
authors = ["Project Chimera"]
readme = "README.md"
packages = [{include = "src"}]

[tool.poetry.dependencies]
python = "^3.11"
pydantic = "^2.5.3"
pydantic-settings = "^2.1.0"
asyncio = "^3.4.3"
aiohttp = "^3.9.3"
asyncpg = "^0.29.0"
redis = "^5.0.1"
celery = {version = "^5.3.4", extras = ["redis"]}
discord-py = "^2.3.2"
cassiopeia = "^5.1.0"
structlog = "^24.1.0"
python-json-logger = "^2.0.7"
uvloop = {version = "^0.19.0", markers = "sys_platform != 'win32'"}

[tool.poetry.group.dev.dependencies]
pytest = "^8.0.0"
pytest-asyncio = "^0.23.3"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
mypy = "^1.8.0"
ruff = "^0.2.0"
pre-commit = "^3.6.0"
types-aiofiles = "^23.2.0.0"
types-redis = "^4.6.0.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

# Ruff Configuration - The Rust-based Python linter
[tool.ruff]
line-length = 120
target-version = "py311"
fix = true

# Include and exclude patterns
include = ["*.py", "*.pyi", "**/pyproject.toml"]
exclude = [
    ".git",
    ".venv",
    "__pycache__",
    "dist",
    "build",
    "*.egg-info",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    "node_modules",
    ".conductor"
]

[tool.ruff.lint]
# Enable comprehensive rule sets
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "B",    # flake8-bugbear
    "C90",  # mccabe complexity
    "N",    # pep8-naming
    "UP",   # pyupgrade
    "YTT",  # flake8-2020
    "ANN",  # flake8-annotations
    "S",    # flake8-bandit (security)
    "BLE",  # flake8-blind-except
    "FBT",  # flake8-boolean-trap
    "A",    # flake8-builtins
    "COM",  # flake8-commas
    "C4",   # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "T10",  # flake8-debugger
    "EM",   # flake8-errmsg
    "EXE",  # flake8-executable
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions
    "G",    # flake8-logging-format
    "INP",  # flake8-no-pep420
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "PYI",  # flake8-pyi
    "PT",   # flake8-pytest-style
    "Q",    # flake8-quotes
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "SLF",  # flake8-self
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "TCH",  # flake8-type-checking
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "PGH",  # pygrep-hooks
    "PL",   # Pylint
    "TRY",  # tryceratops
    "RUF",  # Ruff-specific rules
]

# Ignore specific rules
ignore = [
    "ANN101",  # Missing type annotation for self
    "ANN102",  # Missing type annotation for cls
    "ANN401",  # Dynamically typed expressions (Any)
    "S101",    # Use of assert detected
    "BLE001",  # Do not catch blind exception
    "FBT001",  # Boolean positional arg in function definition
    "FBT002",  # Boolean default value in function definition
    "PLR0913", # Too many arguments to function call
    "TRY003",  # Avoid specifying long messages outside the exception class
]

# Allow autofix for all enabled rules
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "PLR2004", "ANN"]
"src/contracts/*" = ["ANN"]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "lf"

# MyPy Configuration - Static type checker
[tool.mypy]
python_version = "3.11"
mypy_path = "src"
namespace_packages = false

# Strict mode settings
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = true
no_implicit_optional = true
check_untyped_defs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_incomplete_defs = true
strict_optional = true
strict_equality = true

# Import discovery
follow_imports = "normal"
ignore_missing_imports = false
show_error_codes = true
show_error_context = true
pretty = true

# Cache
incremental = true
cache_dir = ".mypy_cache"

# Plugins
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = [
    "cassiopeia.*",
    "discord.*",
    "celery.*",
    "uvloop.*"
]
ignore_missing_imports = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

# Pytest Configuration
[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
addopts = [
    "--strict-markers",
    "--tb=short",
    "--cov=src",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "-vv",
    "--color=yes"
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow tests",
    "external: Tests requiring external services",
    "riot_api: Tests requiring Riot API access"
]

# Coverage Configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py"
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
