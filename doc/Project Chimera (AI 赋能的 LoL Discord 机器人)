# 项目代号：Project Chimera (AI 赋能的 LoL Discord 机器人)

## 核心愿景
构建一个智能游戏伴侣与社区分析师。它超越了基础数据查询，利用 Riot Games API (Match-V5 Timeline) 进行深度数据分析，并通过 LLM (Gemini) 和 TTS (豆包) 提供富有洞察力、个性化且情感化的交互体验。核心功能是数据驱动的赛后评分体系和深度分析指令“/讲道理”。

## 开发哲学：Vibe Coding 与并行工程
项目采用快速迭代、多 CLI 并行开发的工作流。强调即时反馈。我们基于任务依赖图 (DAG) 最大化并行处理无依赖的节点。

## 架构约束与技术栈 (必须严格遵守)
1.  **架构模式：** 采用六边形架构（Hexagonal Architecture）。
    *   `src/core/`: 领域逻辑（评分算法、权限）。禁止直接调用外部 API。
    *   `src/adapters/`: 外部交互（Riot API/Cassiopeia、Discord.py、PostgreSQL、Redis、LLM/TTS）。
    *   `src/contracts/`: 数据契约与模型。
2.  **类型安全：** 使用 Pydantic V2 定义所有数据模型。所有代码必须通过严格的 MyPy 类型检查。使用 `Type | None` 而非 `Optional`。
3.  **异步编程：** 全面使用 Python `asyncio` 和异步任务队列 (Celery/RQ)。
4.  **配置管理：** 使用 Pydantic Settings 从环境变量加载配置。禁止硬编码。
5.  **质量控制：** 采用 TDD。使用 `pytest-asyncio` 进行测试。强制执行 Ruff (Linting/Formatting) 和 pre-commit hooks。
6.  **可观测性：** 所有核心函数和 Adapter 调用必须应用 `llm_debug_wrapper` 装饰器追踪性能和错误，并保证结构化日志。

## 当前任务焦点
[在此处插入当前具体的开发任务，例如：“实现 src/adapters/riot_api.py 中的 get_match_timeline 方法，确保其返回 Pydantic 模型 MatchTimeline，并处理 429 速率限制错误。”]

您的“Project Chimera”项目蓝图非常详尽且先进。鉴于其复杂的架构（六边形架构、异步任务队列）和对 Riot API 的深度依赖，开发前的准备工作应着重于技术选型、合规性保障和高并发处理机制的实现。

针对您当前的**具体任务焦点**（实现 `src/adapters/riot_api.py` 中的 `get_match_timeline` 方法，确保其返回 Pydantic 模型 `MatchTimeline`，并处理 429 速率限制错误），以及**项目整体约束**，以下是详细的开发前准备清单和相关技术细节。

---

## Project Chimera 开发前准备清单（细节补充）

### 一、 Riot API 客户端与 429 速率限制应对 (Adapter 焦点)

您当前任务的核心是确保 Riot API Adapter (`src/adapters/riot_api.py`) 能够高效、安全地获取 Match Timeline 数据并处理限速错误。

1.  **Riot API 客户端选型 (Python/Async)**
    *   **推荐使用 Cassiopeia：** 鉴于您对“完美速率限制处理”的高要求，应优先考虑集成 **Cassiopeia**。它是一个**“全包容”的 Python 框架**，专注于可用性，提供**“完美”的速率限制处理**和**内置缓存功能**。这将大大简化您在 `src/adapters/` 中处理 429 错误的逻辑。
    *   **Riot-Watcher 风险提示：** **Riot-Watcher** 默认的速率限制器是**朴素的**，并且在**并发使用时存在竞态条件**的已知问题，且**不会自动重试 429 错误**。如果选择此库，您必须自行实现复杂的并发和重试机制。
    *   **其他异步选项：** 另一个基于 AsyncIO 的 Python 框架是 **Pyot**，它也支持速率限制。

2.  **429 错误处理机制（强制要求）**
    *   无论是 Riot API 还是 Discord API，处理 **429 (Rate Limit Exceeded)** 错误的关键框架是读取并**遵守响应头中的 `Retry-After` 值**，暂停后续请求，以避免被禁用访问权限。
    *   在 `get_match_timeline` 方法中，必须确保 API 客户端（如 Cassiopeia）或您的自定义逻辑能够捕获 429 错误，并根据 Riot 的指示进行**指数退避或等待**。

3.  **API 密钥准备与配额**
    *   由于项目面向公共且涉及深度分析，您必须申请 **生产 API 密钥 (Production Key)**。开发密钥（每 10 秒限制 10 次调用）无法支持高并发的 Match-V5 Timeline 数据获取。
    *   生产密钥的起始速率限制远高于开发密钥（例如，每 10 秒 500 次请求，每 10 分钟 30,000 次请求，按区域执行）。
    *   密钥**必须通过 Pydantic Settings 从环境变量加载**，**禁止硬编码**。

### 二、 架构约束与技术栈实现

1.  **Hexagonal Architecture 边界**
    *   **领域核心 (`src/core/`)：** 您的赛后评分算法和权限管理逻辑必须驻留在 `src/core/` 中。**该核心层严禁直接调用 Riot API 或数据库**。它将通过接口调用 `src/adapters/` 提供的契约方法。
    *   **Adapter 实现 (`src/adapters/`)：** `get_match_timeline` 方法的实现必须在这里，负责处理所有网络通信、JSON 解析和限速逻辑。

2.  **异步编程和任务队列 (Celery/RQ)**
    *   **异步核心：** 您的项目必须全面采用 Python 的 `async` 和 `await` 关键字，以确保在高并发下机器人不会被阻塞（Blocking）。
    *   **任务卸载：** 深度分析指令 `/讲道理` 涉及获取 Match-V5 Timeline 数据和 LLM 调用，这是耗时的阻塞操作。必须将此任务推送到异步任务队列 (Celery/RQ，通常由 **Redis** 作为代理) 进行后台处理。
    *   **异步库：** 准备使用 `aiohttp` 进行通用网络请求，并为 PostgreSQL 准备异步库，例如 **`asyncpg`**。

3.  **数据契约与类型安全**
    *   **Pydantic V2 应用：** Riot API 返回的 Match-V5 Timeline 数据必须在 `src/adapters/riot_api.py` 中被解析并封装成 **Pydantic V2 模型 (`MatchTimeline`)**，并在 `src/contracts/` 中定义。
    *   **类型检查：** 所有代码必须通过**严格的 MyPy 类型检查**。
    *   **Optional 语法：** 遵守使用 `Type | None` 而非 `Optional[Type]` 的约定。

4.  **质量控制和可观测性**
    *   **测试框架：** 采用 **TDD** (测试驱动开发)，并使用 **`pytest-asyncio`** 来测试您的异步代码，特别是 Adapter 中的限速和错误处理逻辑。
    *   **可观测性要求：** 确保所有核心函数和 Adapter 调用（包括 `get_match_timeline`）都应用了 **`llm_debug_wrapper` 装饰器**，以追踪性能和错误，并保证结构化日志输出。

### 三、 Discord 交互和用户体验细节

1.  **延迟回复机制**
    *   由于 `/讲道理` 深度分析耗时，必须实现 Discord 的 **延迟回复 (Defer Reply)** 机制。
    *   机器人必须在接收到交互事件的 **3 秒内** 发送初始响应 **`DEFERRED_CHANNEL_MESSAGE_WITH_SOURCE` (值 5)**，以向用户显示“正在加载”状态，否则交互令牌将失效。
    *   后台任务完成后，使用 **PATCH** `/webhooks/{application.id}/{interaction.token}/messages/@original` 端点或 **跟进消息** 发送最终的分析结果。

2.  **LLM 交互与角色设定**
    *   LLM (Gemini) 将接收结构化的比赛数据作为输入。
    *   准备**系统提示 (System Prompt)** 文件（如 `config.json` 或环境变量）来定义机器人的个性和规则，以实现 **“/讲道理”（AI 数据裁判）** 和 **“/垃圾话模式”** 的角色扮演。
    *   确保 LLM 的输出能够包含**情绪标签**，以便 TTS 服务（豆包）能够根据这些标签调整语调和语速，提供情感化的播报。

### 四、 合规性、认证与数据源

1.  **Riot 合规性（强制）**
    *   在开发前必须阅读并理解 Riot Games 的 **API 条款 (API Terms)** 和 **主要使用条款 (Master TOU)**。
    *   产品不得提供任何游戏中未显示的信息，从而给玩家带来**竞争优势**（例如，自动追踪敌方终极技能冷却时间）。
    *   如果计划通过 VIP 内容**收费**，**必须事先通知 Riot 并获得书面批准**，且收费内容必须具有**变革性 (Transformative)**，并提供**免费访问层级**。

2.  **用户身份验证 (RSO)**
    *   要实现用户绑定（Discord ID, PUUID），您需要使用 **Riot Sign On (RSO)/OAuth 流程**。
    *   RSO 集成仅对**拥有生产级 API 密钥**的开发者开放。您需要指导玩家定向到授权链接，通过授权码换取访问令牌，然后获取其 **PUUID**。

3.  **数据集成与静态资源**
    *   **Match-V5 Timeline API** 是实现“深度数据分析”和“赛后评分体系”的**数据核心**。
    *   使用 **Data Dragon** 来获取英雄、物品、符文的**静态数据和图片资源**，并支持多语言（例如 `zh_CN`）。
    *   可以考虑集成 **opgg.py** 等**非官方 Python 库**来获取 OPGG 上的英雄出装、符文和排名等补充数据，以增强 `/讲道理` 的分析维度，但需注意爬虫风险。
