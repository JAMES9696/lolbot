# Project Chimera - Pre-commit Hooks Configuration
# Quality gates that must not be crossed

default_language_version:
  python: python3.11

repos:
  # General file fixes
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
        name: Trim trailing whitespace
      - id: end-of-file-fixer
        name: Fix missing end-of-file newline
      - id: check-yaml
        name: Check YAML syntax
      - id: check-json
        name: Check JSON syntax
      - id: check-toml
        name: Check TOML syntax
      - id: check-added-large-files
        name: Check for large files
        args: ['--maxkb=1000']
      - id: check-case-conflict
        name: Check for case conflicts
      - id: check-merge-conflict
        name: Check for merge conflicts
      - id: check-docstring-first
        name: Check docstrings come first
      - id: detect-private-key
        name: Detect private keys
      - id: fix-byte-order-marker
        name: Fix UTF-8 byte order marker
      - id: mixed-line-ending
        name: Fix mixed line endings
        args: ['--fix=lf']
      - id: name-tests-test
        name: Verify test file naming
        args: ['--pytest-test-first']

  # Security checks
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        name: Detect secrets
        args: ['--baseline', '.secrets.baseline']
        exclude: |
          (?x)^(
            .*\.lock$|
            .*\.md$|
            .*\.txt$|
            docker-compose\.yml$
          )

  # Python code formatting with Ruff
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.2.0
    hooks:
      # Run the linter
      - id: ruff
        name: Ruff linting
        args: [--fix]
        types_or: [python, pyi]
      # Run the formatter
      - id: ruff-format
        name: Ruff formatting
        types_or: [python, pyi]

  # Static type checking with MyPy
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.8.0
    hooks:
      - id: mypy
        name: MyPy type checking
        args:
          - --config-file=pyproject.toml
          - --show-error-codes
          - --pretty
        additional_dependencies:
          - pydantic>=2.5.3
          - pydantic-settings>=2.1.0
          - types-aiofiles>=23.2.0.0
          - types-redis>=4.6.0.0
          - aiohttp>=3.9.3
          - structlog>=24.1.0
        files: ^src/
        pass_filenames: true

  # Check for common Python security issues
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.6
    hooks:
      - id: bandit
        name: Bandit security checks
        args: ['-ll', '-i', '-r']
        files: ^src/
        exclude: ^tests/

  # Poetry dependency and lock file checks
  - repo: https://github.com/python-poetry/poetry
    rev: 1.7.1
    hooks:
      - id: poetry-check
        name: Poetry configuration check
      - id: poetry-lock
        name: Poetry lock file check
        args: ["--check"]

  # Dockerfile linting
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint
        name: Dockerfile linting
        files: Dockerfile

  # YAML linting
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.33.0
    hooks:
      - id: yamllint
        name: YAML linting
        args: ['-d', '{extends: relaxed, rules: {line-length: {max: 120}}}']

  # SQL formatting (for migration files)
  - repo: https://github.com/sqlfluff/sqlfluff
    rev: 3.0.2
    hooks:
      - id: sqlfluff-lint
        name: SQL linting
        files: \.(sql)$
        args: ['--dialect', 'postgres']

  # Markdown linting
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.38.0
    hooks:
      - id: markdownlint
        name: Markdown linting
        args: ['--fix']

# Custom local hooks
  - repo: local
    hooks:
      - id: no-hardcoded-secrets
        name: Check for hardcoded secrets
        entry: >
          bash -c 'grep -rE "(password|secret|token|api_key)\s*=\s*[\"'"'"'][^\"'"'"']+[\"'"'"']" src/ || exit 0'
        language: system
        pass_filenames: false
        files: \.py$

      - id: check-asyncio-usage
        name: Check proper asyncio usage
        entry: >
          bash -c 'grep -rE "^[^#]*\basyncio\.run\(" src/ && echo "Warning: asyncio.run() found. Consider using proper async context." || exit 0'
        language: system
        pass_filenames: false
        files: \.py$

      - id: verify-type-hints
        name: Verify type hints presence
        entry: >
          bash -c 'grep -rE "def\s+\w+\([^)]*\)\s*:" src/ | grep -v "\->" | head -5 && echo "Warning: Functions without return type hints found" || exit 0'
        language: system
        pass_filenames: false
        files: \.py$

      - id: check-todo-format
        name: Check TODO comment format
        entry: >
          bash -c 'grep -rE "# (TODO|FIXME|HACK|XXX)" src/ | grep -v "# \(TODO\|FIXME\|HACK\|XXX\)(\w+):" | head -5 && echo "Warning: TODOs should include author name" || exit 0'
        language: system
        pass_filenames: false
        files: \.py$

ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: [poetry-check, poetry-lock, mypy]
  submodules: false
