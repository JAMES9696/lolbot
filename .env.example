# ==========================================
# Project Chimera Environment Configuration
# ==========================================
# Copy this file to .env and fill in your values

# ==========================================
# Discord Bot Configuration (REQUIRED)
# ==========================================
DISCORD_BOT_TOKEN=your_discord_bot_token_here
DISCORD_APPLICATION_ID=your_application_id_here
# Optional: Only needed for HTTP interactions verification; discord.py gateway bots do not require it
# DISCORD_PUBLIC_KEY=your_discord_public_key_here

# Optional: Set this to your guild ID for faster command sync during development
# DISCORD_GUILD_ID=your_test_guild_id_here

BOT_PREFIX=!

# ==========================================
# Riot API Configuration (REQUIRED)
# ==========================================
RIOT_API_KEY=your_riot_api_key_here

# ==========================================
# Database Configuration
# ==========================================
# PostgreSQL connection string
DATABASE_URL=postgresql://user:password@localhost:5432/lolbot
DATABASE_POOL_SIZE=20
DATABASE_MAX_OVERFLOW=40
DATABASE_POOL_TIMEOUT=30

# ==========================================
# Redis Configuration
# ==========================================
# Redis connection URL for caching and state management
REDIS_URL=redis://localhost:6379
REDIS_CACHE_TTL=3600
REDIS_MATCH_CACHE_TTL=86400

# ==========================================
# RSO (Riot Sign-On) OAuth Configuration (REQUIRED for /bind)
# ==========================================
# Get these from Riot Developer Portal: https://developer.riotgames.com/
SECURITY_RSO_CLIENT_ID=your_rso_client_id_here
SECURITY_RSO_CLIENT_SECRET=your_rso_client_secret_here

# Callback URL - must match the one registered in Riot Developer Portal
# Default: http://localhost:3000/callback
SECURITY_RSO_REDIRECT_URI=http://localhost:3000/callback

# IMPORTANT (RSO Invalid Request troubleshooting):
# - RSO OAuth is available only for approved production apps. Development keys cannot complete the flow.
# - The generated authorize URL follows:
#   https://auth.riotgames.com/authorize?client_id=$CLIENT_ID&redirect_uri=$REDIRECT&response_type=code&scope=openid+offline_access+cpid&state=...&prompt=consent
# - If you see "Invalid Request" after clicking the Riot OAuth button, check:
#   1) redirect_uri exactly matches the portal entry (scheme/host/port/path)
#   2) client_id is the OAuth Client ID (NOT the API key)
#   3) scope includes at least 'openid offline_access' (this project also adds 'cpid')

# Enable mock RSO (development only). NEVER enable in production.
MOCK_RSO_ENABLED=false

# ==========================================
# AI Configuration (Optional)
# ==========================================
# Google Gemini API for match analysis
GEMINI_API_KEY=your_gemini_api_key_here
GEMINI_MODEL=gemini-pro
GEMINI_TEMPERATURE=0.7
GEMINI_MAX_OUTPUT_TOKENS=2048

# ==========================================
# TTS Configuration (Optional)
# ==========================================
# Volcengine Doubao TTS for voice narration
# Docs: docs/volcengine_tts_setup.md
# Typical endpoints:
#   HTTP sync: https://openspeech.bytedance.com/api/v1/tts
#   WS stream: wss://openspeech.bytedance.com/api/v1/tts/ws
# Auth: set header X-Api-Key with your API key
TTS_API_KEY=your_volcengine_api_key_here
TTS_API_URL=https://openspeech.bytedance.com/api/v1/tts
TTS_VOICE_ID=doubao_xxx
TTS_APP_ID=your_volcengine_app_id_here

# Optional timeouts (seconds)
TTS_TIMEOUT_SECONDS=15
TTS_UPLOAD_TIMEOUT_SECONDS=10

# ==========================================
# S3/CDN Configuration (Required for TTS voice delivery)
# ==========================================
# AWS S3 credentials for audio file storage
AWS_ACCESS_KEY_ID=your_aws_access_key_here
AWS_SECRET_ACCESS_KEY=your_aws_secret_key_here
AWS_S3_BUCKET=your-lolbot-audio-bucket
AWS_S3_REGION=us-east-1
# CDN base URL for public access (CloudFront or S3 public URL)
CDN_BASE_URL=https://your-cdn-domain.com
# Audio file expiration (in seconds, default: 7 days)
AUDIO_FILE_TTL_SECONDS=604800

# ==========================================
# Application Configuration
# ==========================================
APP_NAME=Project Chimera
APP_VERSION=0.1.0
APP_ENV=development
APP_DEBUG=false
APP_LOG_LEVEL=INFO

# ==========================================
# Celery Async Task Queue (REQUIRED for /ËÆ≤ÈÅìÁêÜ)
# ==========================================
# Celery broker URL - uses Redis database 0 for task queue
CELERY_BROKER_URL=redis://localhost:6379/0

# Celery result backend - uses Redis database 1 for storing task results
CELERY_RESULT_BACKEND=redis://localhost:6379/1

# Task execution limits (in seconds)
# Hard time limit - task will be killed if exceeds this
CELERY_TASK_TIME_LIMIT=300

# Soft time limit - task receives SoftTimeLimitExceeded exception
CELERY_TASK_SOFT_TIME_LIMIT=240

# Worker concurrency (number of parallel worker processes)
# Recommended: number of CPU cores
CELERY_WORKER_CONCURRENCY=4

# Task serialization format (json is safer than pickle)
CELERY_TASK_SERIALIZER=json
CELERY_RESULT_SERIALIZER=json
CELERY_ACCEPT_CONTENT=json

# ==========================================
# Feature Flags
# ==========================================
FEATURE_VOICE_ENABLED=false
FEATURE_AI_ANALYSIS_ENABLED=true
FEATURE_LEADERBOARD_ENABLED=true
FEATURE_TEAM_ANALYSIS_ENABLED=false
FEATURE_FEEDBACK_ENABLED=true

# Team Analysis Auto TTS Playback
# When enabled, bot will automatically join your voice channel and play TL;DR after /team-analyze
# Requires: FEATURE_VOICE_ENABLED=true, valid TTS configuration, and bot in a voice-enabled guild
FEATURE_TEAM_AUTO_TTS_ENABLED=false

# ==========================================
# Feedback API (optional)
# ==========================================
# If set, CLI 1 will POST user feedback events (üëç/üëé/‚≠ê) to this endpoint.
# Expected payload: { match_id, user_id, feedback_type, prompt_variant, timestamp }
# Example: https://cli2.example.com/api/v1/feedback
FEEDBACK_API_URL=

# ==========================================
# Voice Broadcast Configuration (for Team Analysis Auto TTS)
# ==========================================
# HTTP callback server base URL for voice playback jobs
# The bot process runs an HTTP server to receive webhook callbacks for voice playback
BROADCAST_SERVER_URL=http://localhost:8080

# Webhook authentication secret for broadcast callbacks
# External services (tournament systems, etc.) must include this token in X-Auth-Token header
# Generate with: openssl rand -hex 32
BROADCAST_WEBHOOK_SECRET=your_broadcast_secret_here

# ==========================================
# A/B Testing Configuration (V2 Prompt Engineering)
# ==========================================
# Enable A/B testing for prompt variant experiments
AB_TESTING_ENABLED=true

# Variant weights (must sum to 1.0)
# Default: 50/50 split between V1 baseline and V2 team-relative
AB_VARIANT_A_WEIGHT=0.5
AB_VARIANT_B_WEIGHT=0.5

# Randomization seed for cohort assignment
# Change this value to trigger new cohort assignments across all users
# Format: prompt_ab_YYYY_QX (e.g., prompt_ab_2025_q4)
AB_TESTING_SEED=prompt_ab_2025_q4

# ==========================================
# Development & Testing Configuration
# ==========================================
# Discord Data Validation (Development/Testing Only)
# Enables pre-flight validation for all Discord API calls (embeds, webhooks, TTS)
# This catches formatting errors, API limit violations, and rendering issues BEFORE sending
# NEVER enable in production - use for development/testing only
CHIMERA_DEV_VALIDATE_DISCORD=false

# Strict Validation Mode (optional)
# When enabled, validation failures will raise exceptions instead of just logging
# Recommended: true for local development, false for CI/CD
# CHIMERA_DEV_STRICT=false

# Usage:
#   1. Set CHIMERA_DEV_VALIDATE_DISCORD=true in development
#   2. Test with: python scripts/test_discord_embed.py --mock
#   3. Check logs for validation results
#   4. See docs/DISCORD_VALIDATION_GUIDE.md for details

# ==========================================
# UI/UX Configuration
# ==========================================
# ASCII-SAFE mode: Remove emojis and ANSI codes from Discord code blocks
# Fixes rendering issues ("ÔøΩ" characters) in team receipts and single-player cards
# - Bar charts become "##########------" instead of emoji-based (‚ñà‚ñì‚ñí‚ñë)
# - Dimension labels become plain text without emojis
# - Code blocks use only ASCII characters for maximum compatibility
# Recommended: true if you see garbled characters in Discord messages
UI_ASCII_SAFE=false

# ==========================================
# Advanced LLM Configuration
# ==========================================
# Team Analysis Full-Token Mode (optional but recommended)
# When enabled, team analysis uses full player context for better TL;DR generation
# Provides more accurate relative performance analysis
# Recommended: true for production use
TEAM_FULL_TOKEN_MODE=false
